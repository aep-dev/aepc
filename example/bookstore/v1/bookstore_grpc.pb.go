// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: example/bookstore/v1/bookstore.proto

package bookstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bookstore_Createbook_FullMethodName      = "/example.bookstore.v1.Bookstore/Createbook"
	Bookstore_Getbook_FullMethodName         = "/example.bookstore.v1.Bookstore/Getbook"
	Bookstore_Updatebook_FullMethodName      = "/example.bookstore.v1.Bookstore/Updatebook"
	Bookstore_Deletebook_FullMethodName      = "/example.bookstore.v1.Bookstore/Deletebook"
	Bookstore_Listbook_FullMethodName        = "/example.bookstore.v1.Bookstore/Listbook"
	Bookstore_Applybook_FullMethodName       = "/example.bookstore.v1.Bookstore/Applybook"
	Bookstore_Createpublisher_FullMethodName = "/example.bookstore.v1.Bookstore/Createpublisher"
	Bookstore_Getpublisher_FullMethodName    = "/example.bookstore.v1.Bookstore/Getpublisher"
	Bookstore_Updatepublisher_FullMethodName = "/example.bookstore.v1.Bookstore/Updatepublisher"
	Bookstore_Deletepublisher_FullMethodName = "/example.bookstore.v1.Bookstore/Deletepublisher"
	Bookstore_Listpublisher_FullMethodName   = "/example.bookstore.v1.Bookstore/Listpublisher"
	Bookstore_Applypublisher_FullMethodName  = "/example.bookstore.v1.Bookstore/Applypublisher"
)

// BookstoreClient is the client API for Bookstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookstoreClient interface {
	// An aep-compliant Create method for book.
	Createbook(ctx context.Context, in *CreatebookRequest, opts ...grpc.CallOption) (*Book, error)
	// An aep-compliant Get method for book.
	Getbook(ctx context.Context, in *GetbookRequest, opts ...grpc.CallOption) (*Book, error)
	// An aep-compliant Update method for book.
	Updatebook(ctx context.Context, in *UpdatebookRequest, opts ...grpc.CallOption) (*Book, error)
	// An aep-compliant Delete method for book.
	Deletebook(ctx context.Context, in *DeletebookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// An aep-compliant List method for books.
	Listbook(ctx context.Context, in *ListbookRequest, opts ...grpc.CallOption) (*ListbookResponse, error)
	// An aep-compliant Apply method for books.
	Applybook(ctx context.Context, in *ApplybookRequest, opts ...grpc.CallOption) (*Book, error)
	// An aep-compliant Create method for publisher.
	Createpublisher(ctx context.Context, in *CreatepublisherRequest, opts ...grpc.CallOption) (*Publisher, error)
	// An aep-compliant Get method for publisher.
	Getpublisher(ctx context.Context, in *GetpublisherRequest, opts ...grpc.CallOption) (*Publisher, error)
	// An aep-compliant Update method for publisher.
	Updatepublisher(ctx context.Context, in *UpdatepublisherRequest, opts ...grpc.CallOption) (*Publisher, error)
	// An aep-compliant Delete method for publisher.
	Deletepublisher(ctx context.Context, in *DeletepublisherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// An aep-compliant List method for publishers.
	Listpublisher(ctx context.Context, in *ListpublisherRequest, opts ...grpc.CallOption) (*ListpublisherResponse, error)
	// An aep-compliant Apply method for publishers.
	Applypublisher(ctx context.Context, in *ApplypublisherRequest, opts ...grpc.CallOption) (*Publisher, error)
}

type bookstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBookstoreClient(cc grpc.ClientConnInterface) BookstoreClient {
	return &bookstoreClient{cc}
}

func (c *bookstoreClient) Createbook(ctx context.Context, in *CreatebookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, Bookstore_Createbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Getbook(ctx context.Context, in *GetbookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, Bookstore_Getbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Updatebook(ctx context.Context, in *UpdatebookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, Bookstore_Updatebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Deletebook(ctx context.Context, in *DeletebookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Bookstore_Deletebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Listbook(ctx context.Context, in *ListbookRequest, opts ...grpc.CallOption) (*ListbookResponse, error) {
	out := new(ListbookResponse)
	err := c.cc.Invoke(ctx, Bookstore_Listbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Applybook(ctx context.Context, in *ApplybookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, Bookstore_Applybook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Createpublisher(ctx context.Context, in *CreatepublisherRequest, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := c.cc.Invoke(ctx, Bookstore_Createpublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Getpublisher(ctx context.Context, in *GetpublisherRequest, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := c.cc.Invoke(ctx, Bookstore_Getpublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Updatepublisher(ctx context.Context, in *UpdatepublisherRequest, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := c.cc.Invoke(ctx, Bookstore_Updatepublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Deletepublisher(ctx context.Context, in *DeletepublisherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Bookstore_Deletepublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Listpublisher(ctx context.Context, in *ListpublisherRequest, opts ...grpc.CallOption) (*ListpublisherResponse, error) {
	out := new(ListpublisherResponse)
	err := c.cc.Invoke(ctx, Bookstore_Listpublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) Applypublisher(ctx context.Context, in *ApplypublisherRequest, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := c.cc.Invoke(ctx, Bookstore_Applypublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookstoreServer is the server API for Bookstore service.
// All implementations must embed UnimplementedBookstoreServer
// for forward compatibility
type BookstoreServer interface {
	// An aep-compliant Create method for book.
	Createbook(context.Context, *CreatebookRequest) (*Book, error)
	// An aep-compliant Get method for book.
	Getbook(context.Context, *GetbookRequest) (*Book, error)
	// An aep-compliant Update method for book.
	Updatebook(context.Context, *UpdatebookRequest) (*Book, error)
	// An aep-compliant Delete method for book.
	Deletebook(context.Context, *DeletebookRequest) (*emptypb.Empty, error)
	// An aep-compliant List method for books.
	Listbook(context.Context, *ListbookRequest) (*ListbookResponse, error)
	// An aep-compliant Apply method for books.
	Applybook(context.Context, *ApplybookRequest) (*Book, error)
	// An aep-compliant Create method for publisher.
	Createpublisher(context.Context, *CreatepublisherRequest) (*Publisher, error)
	// An aep-compliant Get method for publisher.
	Getpublisher(context.Context, *GetpublisherRequest) (*Publisher, error)
	// An aep-compliant Update method for publisher.
	Updatepublisher(context.Context, *UpdatepublisherRequest) (*Publisher, error)
	// An aep-compliant Delete method for publisher.
	Deletepublisher(context.Context, *DeletepublisherRequest) (*emptypb.Empty, error)
	// An aep-compliant List method for publishers.
	Listpublisher(context.Context, *ListpublisherRequest) (*ListpublisherResponse, error)
	// An aep-compliant Apply method for publishers.
	Applypublisher(context.Context, *ApplypublisherRequest) (*Publisher, error)
	mustEmbedUnimplementedBookstoreServer()
}

// UnimplementedBookstoreServer must be embedded to have forward compatible implementations.
type UnimplementedBookstoreServer struct {
}

func (UnimplementedBookstoreServer) Createbook(context.Context, *CreatebookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createbook not implemented")
}
func (UnimplementedBookstoreServer) Getbook(context.Context, *GetbookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getbook not implemented")
}
func (UnimplementedBookstoreServer) Updatebook(context.Context, *UpdatebookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatebook not implemented")
}
func (UnimplementedBookstoreServer) Deletebook(context.Context, *DeletebookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletebook not implemented")
}
func (UnimplementedBookstoreServer) Listbook(context.Context, *ListbookRequest) (*ListbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listbook not implemented")
}
func (UnimplementedBookstoreServer) Applybook(context.Context, *ApplybookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applybook not implemented")
}
func (UnimplementedBookstoreServer) Createpublisher(context.Context, *CreatepublisherRequest) (*Publisher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createpublisher not implemented")
}
func (UnimplementedBookstoreServer) Getpublisher(context.Context, *GetpublisherRequest) (*Publisher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getpublisher not implemented")
}
func (UnimplementedBookstoreServer) Updatepublisher(context.Context, *UpdatepublisherRequest) (*Publisher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatepublisher not implemented")
}
func (UnimplementedBookstoreServer) Deletepublisher(context.Context, *DeletepublisherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletepublisher not implemented")
}
func (UnimplementedBookstoreServer) Listpublisher(context.Context, *ListpublisherRequest) (*ListpublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listpublisher not implemented")
}
func (UnimplementedBookstoreServer) Applypublisher(context.Context, *ApplypublisherRequest) (*Publisher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applypublisher not implemented")
}
func (UnimplementedBookstoreServer) mustEmbedUnimplementedBookstoreServer() {}

// UnsafeBookstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookstoreServer will
// result in compilation errors.
type UnsafeBookstoreServer interface {
	mustEmbedUnimplementedBookstoreServer()
}

func RegisterBookstoreServer(s grpc.ServiceRegistrar, srv BookstoreServer) {
	s.RegisterService(&Bookstore_ServiceDesc, srv)
}

func _Bookstore_Createbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Createbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Createbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Createbook(ctx, req.(*CreatebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Getbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Getbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Getbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Getbook(ctx, req.(*GetbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Updatebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Updatebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Updatebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Updatebook(ctx, req.(*UpdatebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Deletebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Deletebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Deletebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Deletebook(ctx, req.(*DeletebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Listbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Listbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Listbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Listbook(ctx, req.(*ListbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Applybook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Applybook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Applybook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Applybook(ctx, req.(*ApplybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Createpublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatepublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Createpublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Createpublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Createpublisher(ctx, req.(*CreatepublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Getpublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetpublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Getpublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Getpublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Getpublisher(ctx, req.(*GetpublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Updatepublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatepublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Updatepublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Updatepublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Updatepublisher(ctx, req.(*UpdatepublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Deletepublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletepublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Deletepublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Deletepublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Deletepublisher(ctx, req.(*DeletepublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Listpublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListpublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Listpublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Listpublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Listpublisher(ctx, req.(*ListpublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_Applypublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplypublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).Applypublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookstore_Applypublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).Applypublisher(ctx, req.(*ApplypublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookstore_ServiceDesc is the grpc.ServiceDesc for Bookstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.bookstore.v1.Bookstore",
	HandlerType: (*BookstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Createbook",
			Handler:    _Bookstore_Createbook_Handler,
		},
		{
			MethodName: "Getbook",
			Handler:    _Bookstore_Getbook_Handler,
		},
		{
			MethodName: "Updatebook",
			Handler:    _Bookstore_Updatebook_Handler,
		},
		{
			MethodName: "Deletebook",
			Handler:    _Bookstore_Deletebook_Handler,
		},
		{
			MethodName: "Listbook",
			Handler:    _Bookstore_Listbook_Handler,
		},
		{
			MethodName: "Applybook",
			Handler:    _Bookstore_Applybook_Handler,
		},
		{
			MethodName: "Createpublisher",
			Handler:    _Bookstore_Createpublisher_Handler,
		},
		{
			MethodName: "Getpublisher",
			Handler:    _Bookstore_Getpublisher_Handler,
		},
		{
			MethodName: "Updatepublisher",
			Handler:    _Bookstore_Updatepublisher_Handler,
		},
		{
			MethodName: "Deletepublisher",
			Handler:    _Bookstore_Deletepublisher_Handler,
		},
		{
			MethodName: "Listpublisher",
			Handler:    _Bookstore_Listpublisher_Handler,
		},
		{
			MethodName: "Applypublisher",
			Handler:    _Bookstore_Applypublisher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/bookstore/v1/bookstore.proto",
}
