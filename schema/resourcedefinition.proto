// resourcedefinition contains the
// schema of the resource definition.
// regenerate with:
//   protoc ./aepc/schema/resourcedefinition.proto --go_opt paths=source_relative\
//   --go_out=.
syntax = "proto3";
option go_package = "/schema";

// An API service.
message Service {
  // The name of the API.
  string name = 1;

  // The URL of the API service.
  string url = 2;

  // The resources that the API service exposes.
  repeated Resource resources = 3;

  // These are additional objects (list of properties) that may be referenced from another property.
  repeated Schema schemas = 4;

  // The contact information for the API service.
  Contact contact = 5;

  message Contact {
    string name = 1;
    string email = 2;
    string url = 3;
  }
}

// A resource.
message Resource {
  // The type of the resource. Used to programmatically
  // refer to and identify the resource.
  string kind = 1;
  // The plural of the resource. Used in documentation.
  string plural = 2;
  // The list of parent resources, referred to via the kind.
  repeated string parents = 3;
  // Properties of the resource. Also often referred to as it's schema.
  map<string, Property> properties = 4;
  // methods support by the resource.
  Methods methods = 5;
}

// An object is a collection of properties, that does not have methods of it's
// on in the API. It is currently only used as a property of a resource.
message Schema {
  // The name of the schema.
  string name = 1;
  // The properties of the schema.
  map<string, Property> properties = 2;
}

// Methods supported by a resource.
message Methods {
  // The properties of the create method.
  message CreateMethod {
    bool non_client_settable_id = 1;
  }
  // The properties of the read method.
  message ReadMethod {}
  // The properties of the update method.
  message UpdateMethod {}
  // The properties of the delete method.
  message DeleteMethod {}
  // The properties of the list method.
  message ListMethod {
    // true if the list method has unreachable resources.
    bool has_unreachable_resources = 1;
    // true if the list method supports the aep.dev/158 skip parameter.
    bool supports_skip = 2;
    // true if the list method supports the aep.dev/160 filter parameter.
    bool supports_filter = 3;
  }
  // The properties of the global list method.
  message GlobalListMethod {}
  // The properties of the apply method.
  message ApplyMethod {}
  // Properties of a custom method.
  message CustomMethod {
    enum MethodType {
      METHOD_TYPE_UNSPECIFIED = 0;
      GET = 1;
      POST = 2;
    }
    // The name of the custom method.
    string name = 1;
    // The type of the custom method.
    MethodType method_type = 2;
    // The properties of the custom method request.
    Property request = 3;
    // The properties of the custom method response.
    Property response = 4;
  }
  // Specific properties of the create method for the resource.
  CreateMethod create = 1;
  // Specific properties of the read method for the resource.
  ReadMethod read = 2;
  // Specific properties of the update method for the resource.
  UpdateMethod update = 3;
  // Specific properties of the delete emethod for the resource.
  DeleteMethod delete = 4;
  // Specific properties of the list for the resource.
  ListMethod list = 5;
  // Specific properties of the global_list for the resource.
  GlobalListMethod global_list = 6;
  // Specific properties of the apply for the resource.
  ApplyMethod apply = 7;

  repeated CustomMethod custom = 8;
}

// A property represents a field in a resource or object.
message Property {
  oneof types {
    Type type = 1;
    ObjectType object_type = 5;
    ArrayType array_type = 6;
  }
  // field number used for protobuf or other systems where fields must
  // be explicitly enumerated.
  int32 number = 2;
  // true if the property is read only.
  bool readOnly = 3;
  // true if the property is required.
  bool required = 4;
}

message ObjectType {
  // message_name and properties cannot both be set at the same time.
  string message_name = 1;
  map<string, Property> properties = 2;
}

message ArrayType {
  oneof array_details {
    Type type = 1;
    ObjectType object_type = 2;
  }
}

// The pritimive types supported by the schema.
enum Type {
  // The type is unspecified.
  TYPE_UNSPECIFIED = 0;
  // The type is a string.
  STRING = 1;
  // The type is an int32.
  INT32 = 2;
  // The type is an int64.
  INT64 = 3;
  // The type is a double.
  DOUBLE = 4;
  // The type is a float.
  FLOAT = 5;
  // The type is a boolean.
  BOOLEAN = 6;
}