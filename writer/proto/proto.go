// Copyright 2023 Yusuke Fredrick Tsutsumi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package proto

import (
	"bytes"
	"fmt"
	"path/filepath"
	"slices"
	"sort"
	"strings"

	"github.com/aep-dev/aepc/parser"
	"github.com/jhump/protoreflect/desc/builder"
	"github.com/jhump/protoreflect/desc/protoprint"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/types/descriptorpb"
)

var capitalizer cases.Caser

func init() {
	capitalizer = cases.Title(language.AmericanEnglish)
}

func WriteServiceToProto(ps *parser.ParsedService, outputDir string) ([]byte, error) {
	dir, file := filepath.Split(outputDir)
	packageParts := []string{file}
	for dir != "." {
		dir = filepath.Clean(dir)
		dir, file = filepath.Split(dir)
		dir = filepath.Clean(dir)
		packageParts = append(packageParts, file)
	}
	slices.Reverse(packageParts)
	packageName := strings.Join(packageParts, ".")
	println(packageName)

	fb := builder.NewFile("test.proto")
	fb.Package = packageName
	fb.IsProto3 = true
	fb.SetComments(builder.Comments{
		LeadingComment: "this file is autogenerated by aepc",
	})
	pServiceName := toProtoServiceName(ps.Name)
	serviceNameAsLower := fmt.Sprintf("/%s", strings.ToLower(pServiceName))
	fo := &descriptorpb.FileOptions{
		GoPackage: &serviceNameAsLower,
	}
	fb.SetOptions(fo)
	sb := builder.NewService(pServiceName)
	sb.SetComments(builder.Comments{
		LeadingComment: "A service.",
	})
	for _, r := range getSortedResources(ps.ResourceByType) {
		err := AddResource(r, ps, fb, sb)
		if err != nil {
			return []byte{}, fmt.Errorf("adding resource %v failed: %w", r.Kind, err)
		}
	}
	for _, r := range getSortedResources(ps.ObjectByType) {
		err := AddResource(r, ps, fb, sb)
		if err != nil {
			return []byte{}, fmt.Errorf("adding object %v failed: %w", r.Kind, err)
		}
	}
	fb.AddService(sb)
	fd, err := fb.Build()
	if err != nil {
		return []byte{}, fmt.Errorf("unable to build service file %v: %w", fb.GetName(), err)
	}
	printer := protoprint.Printer{
		CustomSortFunction: compareProtoElements,
	}
	var output bytes.Buffer
	err = printer.PrintProtoFile(fd, &output)
	if err != nil {
		return []byte{}, err
	}
	return output.Bytes(), nil
}

func toProtoServiceName(serviceName string) string {
	parts := strings.SplitN(serviceName, ".", 2)
	return capitalizer.String(parts[0])
}

func getSortedResources(prsByString map[string]*parser.ParsedResource) []*parser.ParsedResource {
	keys := []string{}
	for k := range prsByString {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	resources := make([]*parser.ParsedResource, 0, len(keys))
	for _, k := range keys {
		resources = append(resources, prsByString[k])
	}
	return resources
}

// compareProtoElements compares two protoprint.Element instances
// and returns true if the first element should come before the second element.
// customize to adhere to the AEPs.
func compareProtoElements(a, b protoprint.Element) bool {
	return protoPrintKindToElement(a.Kind()) < protoPrintKindToElement(b.Kind())
}

func protoPrintKindToElement(ek protoprint.ElementKind) int {
	switch ek {
	case protoprint.KindPackage:
		return 0
	case protoprint.KindImport:
		return 1
	case protoprint.KindOption:
		return 2
	case protoprint.KindService:
		return 4
	case protoprint.KindEnum:
		return 5
	case protoprint.KindMessage:
		return 6
	case protoprint.KindField:
		return 7
	case protoprint.KindExtensionRange:
		return 8
	case protoprint.KindExtension:
		return 9
	case protoprint.KindReservedRange:
		return 10
	case protoprint.KindReservedName:
		return 11
	case protoprint.KindEnumValue:
		return 12
	case protoprint.KindMethod:
		return 13
	default:
		return 99
	}
}
