// Copyright 2023 Yusuke Fredrick Tsutsumi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package proto

import (
	"bytes"
	"fmt"
	"strings"

	"github.com/aep-dev/aepc/schema"
	"github.com/jhump/protoreflect/desc/builder"
	"github.com/jhump/protoreflect/desc/protoprint"
	"google.golang.org/protobuf/types/descriptorpb"
)

func WriteServiceToProto(s *schema.Service) ([]byte, error) {
	fb := builder.NewFile("test.proto")
	fb.IsProto3 = true
	fb.SetComments(builder.Comments{
		LeadingComment: "this file is autogenerated by aepc",
	})
	serviceNameAsLower := fmt.Sprintf("/%s", strings.ToLower(s.Name))
	fo := &descriptorpb.FileOptions{
		GoPackage: &serviceNameAsLower,
	}
	fb.SetOptions(fo)
	sb := builder.NewService(s.Name)
	// so := &descriptorpb.ServiceOptions{
	// 	go_
	// }
	// sb.SetOptions(options *descriptorpb.ServiceOptions)
	fb.AddService(sb)
	for _, r := range s.Resources {
		err := AddResource(r, fb, sb)
		if err != nil {
			return []byte{}, fmt.Errorf("adding resource %v failed: %w", r.Kind, err)
		}
	}
	fd, err := fb.Build()
	if err != nil {
		return []byte{}, fmt.Errorf("unable to build service file %v: %w", fb.GetName(), err)
	}
	printer := protoprint.Printer{}
	var output bytes.Buffer
	err = printer.PrintProtoFile(fd, &output)
	if err != nil {
		return []byte{}, err
	}
	return output.Bytes(), nil
}
